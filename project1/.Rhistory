source("http://bioconductor.org/bioclite.R")
source("http://bioconductor.org/biocLite.R")
biocLite()
library(xlsx)
library(mtcars)
data(mtcars)
table(mtcars)
str(mtcars)
names(mtcars)
?mtcars
par(mfrow=c(3,3))
fit <- lm(mpg ~ ., data=mtcars)
plot(fit)
par(mfrow=c(2,2))
plot(fit)
fit.am <- lm(mpg ~ factor(am))
fit.am <- lm(mpg ~ factor(am), data=mtcars)
plot(fit.am)
plot(fit.am)
plot(fit.am)
par
plot(fit.am)
par(mfrow=1)
par(mfrow=c(1,1)
)
plot(fit.am)
plot(factor(am),mpg,data=mtcars, cex=2, pch=21, bg="lightblue",color="black")
plot(factor(mtcars$am),mtcars$mpg, cex=2, pch=21, bg="lightblue",color="black")
plot(mtcars$am,mtcars$mpg, cex=2, pch=21, bg="lightblue",color="black")
plot(mtcars$am,mtcars$mpg, cex=2, pch=21, bg="lightblue",colour="black")
abline(fit.am)
summary(fit.am)
warning()
warnings()
fit.amwt <-upddate(fit.am, mpg ~ am + wt)
fit.amwt <-update(fit.am, mpg ~ am + wt)
summary(fit.amwt)
fit.amwthp <-update(fit.am, mpg ~ am + wt +hp)
summary(fit.amwthp)
fit.amwthpcy <-update(fit.am, mpg ~ am + wt +hp +cyl)
summary(fit.amwthpcy)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpcy)
str(mtcars)
fit.amwthpdisp <-update(fit.am, mpg ~ am + wt +hp +disp)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpdisp)
anova(fit.am, fit.amwt, fit.amwtdisp, fit.amwthpdisp)
class()
fit.amdisp <-update(fit.am, mpg ~ am + disp)
summary(fit.amdisp)
anova(fit.am, fit.amwt, fit.amdisp)
anova(fit.am, fit.amwt, fit.amwtdisp, fit.amwthpdisp)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpcy)
fit.amwthpdrat <-update(fit.am, mpg ~ am + wt +hp +drat)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpdrat)
plot(plot(mtcars$am+mtcars$wt+mtcar$hp,mtcars$mpg, cex=2, pch=21, bg="lightblue",colour="black")
)
plot(mtcars$am+mtcars$wt+mtcars$hp, mtcars$mpg, cex=2, pch=21, bg="lightblue",colour="black")
plot(mtcars$am+mtcars$wt, mtcars$mpg, cex=2, pch=21, bg="lightblue",colour="black")
plot(mtcars$am+mtcars$hp, mtcars$mpg, cex=2, pch=21, bg="lightblue",colour="black")
par(mfrow=c(2,2))
par(mfrow=c(2,2))
plot(fit.am)
plot(fit.amwt)
plot(fit.amwthp)
pairs(mtcars, panel=panel.smooth)
The zip file is downloaded from NOAA storm database and read into R as a data frame using read.csv() function.  Browsing the dataset reveals that the following columns are of interest and will be used for further analysis
pairs(mtcars, panel=panel.smooth)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpcy)
fit.amwt <-update(fit.am, mpg ~ factor(am) + wt)
fit.amwthp <-update(fit.am, mpg ~ factor(am) + wt + hp)
fit.amwthpcyl <-update(fit.am, mpg ~ factor(am) + wt + hp + cyl)
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpcyl)
summary(fit.am)
summary(fit.amwt)
summary(fit.amwthp)
summary(fit.amwthpcyl)
fit.amdrat <-update(fit.am, mpg ~ factor(am) + drat)
summary(fit.amdrat)
fit.amwt <-update(fit.am, mpg ~ factor(am) + wt)
fit.amwthp <-update(fit.am, mpg ~ factor(am) + wt + hp)
fit.amwthpcyl <-update(fit.am, mpg ~ factor(am) + wt + hp + factor(cyl))
summary(fit.amwthpcyl)
plot(factor(mtcars$am),mtcars$mpg, cex=2, pch=21, bg="lightblue")
summary(ft.am)
summary(fit.am)
abline(fit.am)
abline(fit.am)$coeff
abline(fit.am)$coeffient
abline(fit.am)$coeffients
(fit.am)$coeffients
(fit.am)$coefficients
names(fit.am)
names(fit.am)$residuals
fit.am$residuals
names(fit.a)
names(fit.am)
str(fit.am)
names(fit.am)
fit.am$effects
fit.am$coefficients
fit.am$df.residual
fit.am$terms
fit.am$model
fit.am$qr
fit.am$rank
fit.am$fitted.values
fit.am$assign
fit.am$contrasts
fit.am$call
fit.am$terms
summary(fit.am)
fit.am$residuals
plot(fit.am$residuals)
plot(fit.am$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.am$residuals,ylab="Residuals", xlab="fitted values")
par=(mfrow=c(2,2))
plot(fit.am$residuals,ylab="Residuals", xlab="fitted values")
par=mfrow9c(2,2))
par=mfrow(c(2,2))
par=mfrow(c=(2,2))
par(mfrow=c(2,2)
)
plot(fit.am$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.amWT$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.amwt$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.amwthp$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values")
plot(fit.am$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion"
)
plot(fit.amwt$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt"
)
plot(fit.amwthp$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp"
)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl"
)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", fontsize=3)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", size=3)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex=3)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.lab=3)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl")
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.lab=1.2)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.lab=0.5)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=0.5)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=1.5)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=0.8)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=1.0)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=1.2)
plot(fit.amwthpcyl$residuals,ylab="Residuals", xlab="fitted values", main = "mpg vs Transmssion,wt,hp,cyl", cex.main=1.1)
summary(fit.am)
tail(summary(fit.am))
summary(fit.am)
fit.am,$r.squard
fit.am$r.squard
fit.am$r.squared
fit.am$fstatistics
names(fit.amm)
names(fit.am)
fit.am$df.residual
fit.am$df.model
fit.am$model
fit.am$qr
summary(fit.am)
tail(fit.am)
tail(summary(fit.am))
summary(fit.am).$r.squared
summary(fit.am)$r.squared
summary(fit.am)
summary(fit.am)$r.squared
summary(fit.am)$r.squared
summary(fit.amwt)$r.squared
summary(fit.amwthp)$r.squared
summary(fit.amwthpcyl)$r.squared
anova(fit.am, fit.amwt, fit.amwthp, fit.amwthpcyl)
summary(ft.amwthp)
summary(fit.amwthp)
fit.amwthp$coefficients
names(summary(fit.am))
summary(fit.am)$adj.r.squared
summary(fit.amwt)$adj.r.squared
summary(fit.amwthp)$adj.r.squared
summary(fit.amwthpcyl)$adj.r.squared
summary(ft.amwthp)
summary(fit.amwthp)
plot(mtcars$mpg ~ mtcars$wt)
fit.amwthp$coefficients
plot(mtcars$mpg ~ factor(mtcars$am)+mtcars$wt+mtcars$hp)
par=nfrow(c=(1,1))
par(mfrow=c(1,1)
plot(mtcars$mpg ~ factor(mtcars$am)+mtcars$wt+mtcars$hp)
par(mfrow=c(1,1))
plot(mtcars$mpg ~ factor(mtcars$am)+mtcars$wt+mtcars$hp)
plot(mtcars$mpg ~ mtcars$am+mtcars$wt+mtcars$hp)
abline(fit.amwthp)
par(mfrow=c(2,2))
plot(mtcars$mpg ~ mtcars$am+mtcars$wt+mtcars$hp)
par(mfrow=c(2,2))
plot(mtcars$mpg ~ mtcars$am+mtcars$wt+mtcars$hp)
par(mfrow=c(2,2))
plot(mtcars$mpg ~ factor(mtcars$am)+mtcars$wt+mtcars$hp)
par(mfrow=c(1,3))
plot(mtcars$mpg ~ mtcars$am)
abline(fit.am)
plot(mtcars$mpg ~ mtcars$wt,bg="lightblue")
abline(fit.amwt, color="red")
abline(fit.amwt, bg="blue")
abline(fit.amwt, bg="lighblue", col="blue")
abline(fit.amwt, col="blue")
abline(lm(), col="blue")
par(mfrow=r(1,3))
par(mfrow=c(3,1))
plot(mtcars$mpg ~ mtcars$wt,bg="lightblue", col="black")
abline(lm(mtcars$mpg ~ mtcars$wt), col="red")
**code for doing Model fit and ANOVA**
date
library
library(swirl)
swirl()
library(swirl)
swirl()
cor()
cor(x)
exit
quit()
library(swirl)
swirl()
cor(child, parent)
cor(child)
cor(galton$child, galton$parent)
cor(gpa_nor, gch_nor)
l_nor <- lm(parent, child, galton)
l_nor <- lm(parent, child, data=galton)
l_nor <- lm(galton$parent, galton$child)
names(galton)
l_nor <- lm(gch_nor ~ gpa_nor)
fit <- lm(child ~ parent, galton)
sum(fit$residuals)/(n-2)
sqrt(sum(fit$residuals^2) / (n - 2))
summary(fit)$sigma
sqrt(deviance(fit)/(n-2))
mu <- mean(galton$child)
sTot <- sum( (galton$child-mu)^2)
sRes <- deviance(galton$child)
sRes <- deviance(fit)
1 - sRes/sTot
summary(fi)$r^2
summary(fit)$r^2
(summary(fit)$r)^2
summary(fit)$r.$squared
summary(fit)$r.squared
summary(fit)$r.squared
cor(galton$parent,galton$child)^2
ones <- rep(1, nrow(galton))
lm(child ~ ones + parent -1, galton)
lm(child ~  parent, galton)
exit
quit()
library(swirl)
swirl()
lm(child ~ 1,galton)
view(trees)
view(trees)
head(trees)
fit <- lm(Vole ~ Girth+Height+Constant -1, trees)
fit <- lm(Volume ~ Girth+Height+Constant -1, trees)
trees2 <- eliminate("Girth", trees)
view(tree20)
head(trees2)
fit2 <- lm(Volume ~ Height + Constant -1,
trees2)
lapply(list(fit, fit2), coef)
lm(Fertility ~ .,swiss)
all <- lm(Fertility ~ .,swiss)
summary(all)
summary(fit)
summary(lm(Fertility ~ Agriculture,swiss))
cor(swiss$Examination, swiss$Education)
cor(swiss$Agriculture, swiss$Education)
makelms()
ec <- (swiss$Examination +swiss$Catholic)
ec <- sum (swiss$Examination ,swiss$Catholic)
ec <- sum (swiss$Examination) +sum(swiss$Catholic)
ec <- swiss$Examination +swiss$Catholic
efit <- lm(Fertility ~ .+ec, swiss)
all$coef - efit$coef
all$coefficients - efit$coefficients
6
dim(InsectSprays)
head(InsectSprays)
head(InsectSprays,15)
names(sB)
names(B)
names(sA)
sB
sB[, 2]
sB[, 2]
sB[,]
sB[2]
summary(InsectSprays[,2])
sapply(InsectSpray, class())
sapply(InsectSpray, class())
sapply(InsectSpray, class())
sapply(InsectSpray, class
)
sapply(InsectSprays, class)
fit <- lm(count ~factor(spray))
fit <- lm(Count ~factor(spray))
fit <- lm(Count ~factor(spray), InsectSprays)
fit <- lm(count ~factor(spray), InsectSprays)
fit$coefficients
summary(fit)$coefficients
summary(fit)$coef
est <- summary(fit)$coef[,1]
mean(sA)
mean(sB)
nfit <- lm(count ~ sray -1 InsectSprays)
nfit <- lm(count ~ spray -1, InsectSprays)
summary(nfit)$coefficients
summary(nfit)$coef
spray2 <- relevel(InsectSprays)
spray2 <- relevel(sprays)
spray2 <- relevel(InsectSprays$sprays)
spray2 <- relevel(InsectSprays$sprays)
spray2 <- relevel(factor(sprays))
spray2 <- relevel(factor(InsectSprays$sprays))
spray2 <- relevel(InsectSprays$sprays)
relevel
spray2 <- relevel(InsectSprays$spray,\"C\")
spray2 <- relevel(InsectSprays$spray,"C")
spray2 <- relevel(InsectSprays$spray,"C")
fit2 <- lm(count ~ spray2, InsectSprays)
fit$coefficients
summary(fit)$coef
summary(fit2)$coef
mean(sC)
(fit$coef[2] -  fit$coef[3])/1.6011
dim(hunger)
13
948
names(hunger)
fit <- lm(Numeric ~ Year, hunger)
summary(fit)$coef
lmF <- lm(hunger[hunger$Sex=="Female",]$Numeric ~ hunger[hunger$Sex=="Female",]$Year)
lmM <- lm(hunger[hunger$Sex=="Male",]$Numeric ~ hunger[hunger$Sex=="Male",]$Year)
lmBoth <- lm(Numeric ~ Year+Sex, hunger)
summary(lmBoth)
lmInter <- lm(Numeric ~ Year + Sex +Sex*Year, hunger)
summary(lmInter)
eit
eit
quit()
library(swirl)
swirl()
fit <- lm(y~x, out2)
polt(fit,which=1)
plot(fit,which=1)
fit <- lm(y~x, out2[-1,])
fitno <- lm(y~x, out2[-1,])
plot(fitno,which=1)
coef(fit) - coef(fitno)
head(dfbeta(fit))
resno <- out2[1, "y"] -predict(fitno, out2[1,])
1-resid(fit)[1]/resno
hatvalues(fit)
head(hatvalues(fit))
sigma <- sqrt()
sigma <- sqrt()
sigma <- sqrt(fit$residuals)
sigma <- sqrt(deviance(fit)/df.residual(fit)))\
sigma <- sqrt(deviance(fit)/df.residual(fit)))
sigma <- sqrt(deviance(fit)/df.residual(fit))
rstd <-
()
rstd <- sigma*sqrt(1-hatvalues(fit)
)
rstd <- resid(fit)/(sigma * sqrt(1-hatvalues(fit)))
head(cbind(rstd, rstandard(fit)))
plot(fit, which=3)
plot(fit, which=2)
sigma1 <- df
sigma1 <- sqrt(deviance(fitno)/df.residual(fitno))
sigma1 *sqrt(1-hatvalues(fit)[1])/ resid(fit)[1]
resid(fit)[1]/(sigma1*sqrt(1-hatvalues(fit)[1]))
head(rstduent(fit))
head(rstudent(fit))
predict(fitno, out2) -predict(fit, out2)
dy <- predict(fitno, out2) -predict(fit, out2)
dy / 2*sigma^2
sum(dy^2) /( 2*sigma^2)
plot(fit, which=5)
setwd("E://courses//jh-dataexplore//ws_machine")
d <- read.csv("pml-training.csv")
colD <- read.table("corColumn.txt")
d.sub <- subset(d, select=c(colD$V1))
# give the subset data meaningful column names
names(d.sub) <- colD$V2
library(caret)
inTrain <- createDataPartition(y=d.sub$classe,p=0.5,list=FALSE)
training <- d.sub[inTrain,]
testing <- d.sub[-inTrain,]
Sys.time()
mod.gbm <- train(classe ~ ., method="gbm",  data=training, verbose=FALSE)
Sys.time()
mod.rf <- train(classe ~ ., method="rf", data=training, trControl = trainControl(method="cv"), number=3)
Sys.time()
pred.gbm <- predict(mod.gbm, testing)
pred.rf <- predict(mod.rf, testing)
qplot(pred.gbm, colour=classe, fill=classe, data=testing)
table.gbm <- table(pred.gbm, testing$classe)
table.rf <- table(pred.rf, testing$classe)
prop.table(table.rf,2)
diag.gbm <- diag(prop.table(table.gbm,2))
diag.rf <- diag(prop.table(table.rf,2))
diag.comb <- cbind(diag.gbm, diag.rf)
par(mfrow=c(1,1))
> with(testing, plot(diag.rf, pch=19, cex=1, col="blue"))
> abline(0,1,lwd=2, col='red')
diag.comb <- cbind(diag.gbm, diag.rf)
# par(mfrow=c(1,1))
with(testing, plot(diag.rf, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
diag.comb <- cbind(diag.gbm, diag.rf)
with(testing, plot(diag.rf, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
par(mfrow=c(1,1))
with(testing, plot(diag.rf, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
abline(0,1)
diag.comb <- cbind(diag.gbm, diag.rf)
#par(mfrow=c(1,1))
with(testing, plot(diag.comb, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
inTrain <- createDataPartition(y=d.sub$classe,p=0.7,list=FALSE)
training <- d.sub[inTrain,]
testing <- d.sub[-inTrain,]
Sys.time()
mod.rf7 <- train(classe ~ ., method="rf", data=training, trControl = trainControl(method="cv"), number=3)
Sys.time()
pred.rf7 <- predict(mod.rf7, testing)
table.rf7 <- table(pred.rf7, testing$classe)
diag.rf7 <- diag(prop.table(table.rf7, 2))
diag.rfcomb <- cbind(diag.rf, diag.rf7)
par(mfrow=c(1,2))
with(testing, plot(diag.comb, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
with(testing, plot(diag.rfcomb, pch=19, cex=1, col="blue"))
abline(0,1,lwd=2, col='red')
t <- read.csv("pml-testing.csv")
t.sub <- subset(t, select=c(colD$V1))
# give the subset data meaningful column names
names(t.sub) <- colD$V2
t.sub$number <- c(1:20)
for (i in 1:20) { print(paste(i,predict(mod.rf7, t.sub[t.sub$number==i,]), sep="  "     )) }
